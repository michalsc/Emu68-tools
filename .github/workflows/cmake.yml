name: CMake

on: [push]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/actions/configuring-and-managing-workflows/configuring-a-workflow#configuring-a-build-matrix
    runs-on: ubuntu-latest
    container:
      image: amigadev/crosstools:m68k-amigaos

    steps:
    - uses: actions/checkout@v2
      with: 
        submodules: 'true'
    - run: cd Emu68Contribs && git checkout main && git pull --allow-unrelated-histories

    - name: Whitelist the repo
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: |
        git config --global --add safe.directory $GITHUB_WORKSPACE

    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: |
        cmake -E make_directory ${{runner.workspace}}/build
        cmake -E make_directory ${{runner.workspace}}/install

    - name: Configure CMake
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      # Note the current convention is to use the -S and -B options here to specify source 
      # and build directories, but this is only available with CMake 3.13 and higher.  
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      run: cmake -B${{runner.workspace}}/build -S$GITHUB_WORKSPACE -DM68K_CPU=custom -DM68K_FPU=custom -DM68K_CRT=custom -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCMAKE_INSTALL_PREFIX:PATH=${{runner.workspace}}/install

    - name: Build
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: cmake --build ${{runner.workspace}}/build --config $BUILD_TYPE -j$(nproc)

    - name: Test
      shell: bash
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C $BUILD_TYPE
    
    - name: Install
      shell: bash
      # Create ARIX directory structure and generate initrd file
      run: cmake --build ${{runner.workspace}}/build --config $BUILD_TYPE --target install

    - name: Archive
      shell: bash
      run: cd ${{runner.workspace}}/install && zip -r ./Emu68-tools.zip . 

    - name: Move archive
      shell: bash
      working-directory: ${{runner.workspace}}/
      run: mv -fv ${{runner.workspace}}/install/Emu68-tools.zip . 

    - name: Upload Artifact
      uses: actions/upload-artifact@v2
      with:
        name: emu68-archive
        path: ${{runner.workspace}}/Emu68-tools.zip
        retention-days: 5

  deploy:
    runs-on: ubuntu-20.04
    needs: build
    steps:  
    - name: Download Artifact
      uses: actions/download-artifact@v2
      with:
        name: emu68-archive
        path: ${{runner.workspace}}/uploads
    
    - name: Release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: ${{runner.workspace}}/uploads/**
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
