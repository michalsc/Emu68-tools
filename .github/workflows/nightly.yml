name: CMake Nightly Build

on:
  workflow_dispatch:
  schedule:
    - cron: "10 0 * * *"


env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/actions/configuring-and-managing-workflows/configuring-a-workflow#configuring-a-build-matrix
    runs-on: ubuntu-latest
    container:
      image: amigadev/crosstools:m68k-amigaos

    steps:
    - uses: actions/checkout@v2
      with: 
        submodules: 'true'
    - run: cd Emu68Contribs && git checkout main && git pull --allow-unrelated-histories

    - name: Whitelist the repo
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: |
        git config --global --add safe.directory $GITHUB_WORKSPACE

    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: |
        cmake -E make_directory ${{runner.workspace}}/build
        cmake -E make_directory ${{runner.workspace}}/install

    - name: Configure CMake
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      # Note the current convention is to use the -S and -B options here to specify source 
      # and build directories, but this is only available with CMake 3.13 and higher.  
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      run: cmake -B${{runner.workspace}}/build -S$GITHUB_WORKSPACE -DM68K_CPU=custom -DM68K_FPU=custom -DM68K_CRT=custom -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCMAKE_INSTALL_PREFIX:PATH=${{runner.workspace}}/install

    - name: Build
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: cmake --build ${{runner.workspace}}/build --config $BUILD_TYPE -j$(nproc)

    - name: Test
      shell: bash
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C $BUILD_TYPE
    
    - name: Install
      shell: bash
      # Create ARIX directory structure and generate initrd file
      run: cmake --build ${{runner.workspace}}/build --config $BUILD_TYPE --target install

    - name: Archive
      shell: bash
      run: cd ${{runner.workspace}}/install && zip -r ./Emu68-tools.zip . 

    - name: Move archive
      shell: bash
      working-directory: ${{runner.workspace}}/
      run: mv -fv ${{runner.workspace}}/install/Emu68-tools.zip . 

    - name: Upload Artifact
      uses: actions/upload-artifact@v2
      with:
        name: emu68-archive
        path: ${{runner.workspace}}/Emu68-tools.zip
        retention-days: 5

  deploy:
    runs-on: ubuntu-20.04
    needs: build
    steps:  
    - name: Download Artifact
      uses: actions/download-artifact@v2
      with:
        name: emu68-archive
        path: ${{runner.workspace}}/uploads
    
    - name: Deploy release
      id: deploy
      uses: WebFreak001/deploy-nightly@v1.1.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # automatically provided by github actions
      with:
        upload_url: https://uploads.github.com/repos/michalsc/Emu68-tools/releases/58662006/assets{?name,label} # find out this value by opening https://api.github.com/repos/<owner>/<repo>/releases in your browser and copy the full "upload_url" value including the {?name,label} part
        release_id: 58662006 # same as above (id can just be taken out the upload_url, it's used to find old releases)
        asset_path: ${{runner.workspace}}/uploads/Emu68-tools.zip # path to archive to upload
        asset_name: Emu68-tools-$$.zip # name to upload the release as, use $$ to insert date (YYYYMMDD) and 6 letter commit hash
        asset_content_type: application/zip # required by GitHub API
        max_releases: 7 # optional, if there are more releases than this matching the asset_name, the oldest ones are going to be deleted

    - name: Declare some variables
      id: vars
      shell: bash
      run: |
        echo "::set-output name=build_date::$(date +"%Y%m%d")"
        echo "::set-output name=sha_short::${GITHUB_SHA::6}"

    - name: Webhook
      if: ${{ steps.deploy.outputs.uploaded == 'yes' }}
      uses: fjogeleit/http-request-action@master
      with:
        url: "${{ secrets.DISCORD_WEBHOOK }}"
        method: 'POST'
        data: '{"username":"Ziggsty the friendly Emu","avatar_url":"https://repository-images.githubusercontent.com/168139345/df1ee280-f4d7-11e9-98df-201401d8d375","content":"[**Emu68-tools**]: New nightly available!","embeds":[{"title":"Emu68-tools-${{ steps.vars.outputs.build_date }}-${{ steps.vars.outputs.sha_short }}.zip","url":"https://github.com/michalsc/Emu68-tools/releases/download/nightly/Emu68-tools-${{ steps.vars.outputs.build_date }}-${{ steps.vars.outputs.sha_short }}.zip"}]}'
        contentType: "application/json"
